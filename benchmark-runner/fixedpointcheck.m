global FiSettings ;
global FiSettingsP ;

FiSettings = fimath('ProductMode',...
                   'SpecifyPrecision',... 
                   'ProductWordLength',16,... 
                   'ProductFractionLength',8, ...
                   'RoundingMethod','Floor',...
                   'SumMode', 'SpecifyPrecision',...
                   'SumWordLength',16, ...
                   'SumFractionLength', 8, ...
                   'OverflowAction', 'Wrap');
               
 FiSettingsP = fimath('ProductMode',...
                   'SpecifyPrecision',... 
                   'ProductWordLength',64,... 
                   'ProductFractionLength',32, ...
                   'RoundingMethod','Floor',...
                   'SumMode', 'SpecifyPrecision',...
                   'SumWordLength',64, ...
                   'SumFractionLength', 32, ...
                   'OverflowAction', 'Wrap');              
               
               
fxp=@(v) fi(v,1,16,8,FiSettings);
fxpP = @(v) fi(v,1,64,32,FiSettingsP);

K = [fxp(46.25), fxp(-16)];
%K = [fxp(17.4384765625), fxp(-0.0537109375)];

A = [fxpP(2.001),fxpP(-1);fxpP(1),fxpP(0)] ;
B = [fxpP(0.0625);fxpP(0)] ;
states = [fxpP(0.5); fxpP(0.5)];
loops = 100;
for i=1:loops

    input = -K * fxp(states);
    tmp_input = double(input);
    if(input>1000 || input< -1000)
        msg = 'input too big'
        return
    end    
    states = A * (states) + B * fxpP(input);
    for idx = 1: numel(states)
        if(states(idx) > 1 || states(idx) < -1)
            msg = 'unsafe'
            i
            return
        end  
    end
end 