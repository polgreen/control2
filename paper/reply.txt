Novelty (R1,R2,R3)

As far as we know, the present synthesis approach that addresses FWL
uncertainties in digital controllers has not been described or
evaluated in the literature.  Moreover, this work is the first use of
CEGIS that handles the effects of FWL.  Note that doing
this efficiently required adjusting the traditional CEGIS refinement
loop to use a two-stage verification engine, where the first stage
performs fast, but potentially unsound fixed-point operations and the
second stage restores soundness by validating the operations performed
by the first stage by using interval arithmetic.  This architecture 
enabled us to obtain candidate solutions fast, which is key to our 
performance.

Assumptions (R2)

Regarding the order of the parametric errors in the transfer fucntions,
given a parametric LTI plant model of a certain order, it is
reasonable to assume that the tolerances are only in the parameters,
therefore of the same order of the model. Similarly, since quantization
effects are on these parameters, they can only have at most the same 
order as the model. 
Although there may be nonlinearities in the ADC, these have been already
abstracted into a linear model, and it is customary in the literature
to assume once a model is selected that the model holds. Some explanation
is given in section 2.3 about the effects on quatization that preserves the
linearity and order of the model.
The uncertainties are assumed to be nondeterministic and within a range,
which is different from linear and independent. In fact, we explore all
possible combinations of uncertainties, hence producing a more robust
model than one describing dependencies.

FWL characteristics (R2)

Note that in section 3.3 we explain that
there are two fixed-point domains in our control synthesis
problem. Whilst the first domain $\mathbb{R}<I,F>$, is the actual
controller domain, whereas $\mathbb{R}<I_p,F_p>$ is the bitvector
domain of the synthesiser, which is used to try and synthesise a real
plant. In this section we explain the latter is started at a lower
resolution for speed and the resolution increased when the rounding
errors in the synthesis algorithm do not allow for correct
synthesis. This is a tool optimization and does not relate to the
problem statement. The reason for the 8-bit steps is because the tool
uses byte alignment.

Synthesis engine comparison (R2)

The two-order of magnitude speed-up is between our two engines,
i.e. one-stage and two-stage engines, where the one-stage engine timed
out on the majority of the benchmarks after 24 hours (as specified in
the last paragraph of Sec 4.1).  We only show the winning back-end for
each benchmark in the current table, but we will provide the full data
in a revised version. Since we didn't find any controller synthesis
tools with comparable soundness guarantees over finite precision
properties, we were only able to compare the two engines against each
other. We also included a maximum plant precision of 64 bits in our
benchmarks, but the missing benchmark timed out before reaching it.

Fixed-point representation (R1)

The FWL implementation is a function of the number of integer bits $I$
and fractional bits $F$; $I$ strongly affects the representation range
and is set to avoid overflows, while $F$ affects the precision and the
truncation process after the arithmetic operations. These variables are chosen
depending on hardware features. In general purpose processors and
DSP's, $I$ is minimized to avoid overflows and $F$ is employed for the
remaining bit representation. Other flexible hardware structures
(e.g., FPGAs) allow the design of $F$ and $I$, which affects directly
the number of logical gates. This is discussed in Sec 2.2.

Experimental evaluation (R1,R2,R3)

We have evaluated our approach using standard benchmarks taken mostly
from the classical control literature [3,15,21,22,35]. Note that the
used benchmarks are typically from existing work on control system
verification. Larger benchmarks would strengthen our claims; however,
related work on controller verification typically considers even
smaller benchmarks (cf. 3.5 and 4.1).  

Preliminaries (R1)

Since our stability analysis is based on polynomial coefficients and
not over signals, Equation (8) incorporates the effects of $\nu$ in
$\vec{\hat{G}}$ (by means of $\Delta_{q} G$), in order to investigate
the system's stability consequences.

The $\Delta_{b}$ of a coefficient $c$ (represented by $\Delta_{b}c$) models 
the error in the fixed-point representation of $c$, which is the division remainder 
between the correct value of coefficient $c$ and its respective FWL format $\tilde{c}$, 
i.e., $\Delta_{b}c=c~ \texttt{mod}~\tilde{c}$.
